#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.24.1
#  in conjunction with Tcl version 8.6
#    Oct 15, 2020 09:24:05 AM +0800  platform: Windows NT

from fs100 import FS100
import re
import sys

try:
    from tkinter import messagebox
except:
    import tkMessageBox as messagebox

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import robot_ctrl_support
import os


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    robot_ctrl_support.set_Tk_var()
    top = Toplevel1 (root)
    robot_ctrl_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    robot_ctrl_support.set_Tk_var()
    top = Toplevel1 (w)
    robot_ctrl_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family 細明體 -size 10 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        if __name__ == '__main__':
            top.geometry("860x640+576+207")
            top.title("New Toplevel")
            top.configure(background="#d9d9d9")
            top.configure(highlightbackground="#d9d9d9")
            top.configure(highlightcolor="black")

        self.Labelframe1 = tk.LabelFrame(top)
        self.Labelframe1.place(relx=0.067, rely=0.087, relheight=0.565
                , relwidth=0.490)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''Variable''')
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")
        self.Labelframe1.configure(width=380)

        self.TCombobox1 = ttk.Combobox(self.Labelframe1)
        self.TCombobox1.place(relx=0.053, rely=0.169, relheight=0.092
                , relwidth=0.466, bordermode='ignore')
        self.TCombobox1.configure(takefocus="")

        self.Label1 = tk.Label(self.Labelframe1)
        self.Label1.place(relx=0.053, rely=0.077, height=25, width=39
                , bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Type''')

        self.Label2 = tk.Label(self.Labelframe1)
        self.Label2.place(relx=0.605, rely=0.077, height=25, width=30
                , bordermode='ignore')
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''No.''')

        self.Label3 = tk.Label(self.Labelframe1)
        self.Label3.place(relx=0.053, rely=0.292, height=25, width=45
                , bordermode='ignore')
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Value''')

        self.Text2 = tk.Text(self.Labelframe1)
        self.Text2.place(relx=0.053, rely=0.369, relheight=0.369, relwidth=0.826
                , bordermode='ignore')
        self.Text2.configure(background="white")
        self.Text2.configure(font="-family {Microsoft JhengHei UI} -size 9")
        self.Text2.configure(foreground="black")
        self.Text2.configure(highlightbackground="#d9d9d9")
        self.Text2.configure(highlightcolor="black")
        self.Text2.configure(insertbackground="black")
        self.Text2.configure(selectbackground="#c4c4c4")
        self.Text2.configure(selectforeground="black")
        self.Text2.configure(width=314)
        self.Text2.configure(wrap="word")

        self.Button1 = tk.Button(self.Labelframe1)
        self.Button1.place(relx=0.066, rely=0.785, height=51, width=140
                , bordermode='ignore')
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Read''')

        self.Button1_2 = tk.Button(self.Labelframe1)
        self.Button1_2.place(relx=0.474, rely=0.785, height=51, width=140
                , bordermode='ignore')
        self.Button1_2.configure(activebackground="#ececec")
        self.Button1_2.configure(activeforeground="#000000")
        self.Button1_2.configure(background="#d9d9d9")
        self.Button1_2.configure(disabledforeground="#a3a3a3")
        self.Button1_2.configure(foreground="#000000")
        self.Button1_2.configure(highlightbackground="#d9d9d9")
        self.Button1_2.configure(highlightcolor="black")
        self.Button1_2.configure(pady="0")
        self.Button1_2.configure(text='''Write''')

        self.Entry1 = tk.Entry(self.Labelframe1)
        self.Entry1.place(relx=0.605, rely=0.169, height=30, relwidth=0.274
                , bordermode='ignore')
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font=font10)
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")

        # manual added
        self.robot = FS100('192.168.255.1')
        self.TCombobox1.configure(value=("IO", "Register", "Byte", "Integer", "Double", "Real", "String", "Robot Position"))
        self.TCombobox1.current(2)
        #self.TCombobox1.configure(font="-family {Monospace} -size 10")
        #if os.name == 'nt':
        #    self.TCombobox1.configure(font="-family {Consolas} -size 11")

        verifier = top.register(self.is_number)
        self.Entry1.configure(validate="key", validatecommand=(verifier, '%S'))
        #self.Entry1.configure(font="-family {Monospace} -size 10")
        #if os.name == 'nt':
        #    self.Entry1.configure(font="-family {Consolas} -size 11")

        self.Button1.configure(command=self.on_read)
        self.Button1_2.configure(command=self.on_write)

    def is_number(self, input):
        return input.isdigit()

    def on_read(self):
        num_str = self.Entry1.get()
        if num_str == "":
            messagebox.showinfo(message="Please input variable number.")
            return
        var_num = int(num_str)
        TYPES = (FS100.VarType.IO, FS100.VarType.REGISTER, FS100.VarType.BYTE, FS100.VarType.INTEGER, FS100.VarType.DOUBLE, FS100.VarType.REAL, FS100.VarType.STRING, FS100.VarType.ROBOT_POSITION)
        var_type = TYPES[self.TCombobox1.current()]
        var = FS100.Variable(var_type, var_num)
        if FS100.ERROR_SUCCESS == self.robot.read_variable(var):
            self.Text2.delete('1.0', tk.END)
            if var_type == FS100.VarType.STRING:
                val_str = var.val.rstrip('\x00')
            elif var_type == FS100.VarType.ROBOT_POSITION:
                val_str = "Data type: [{}]\n".format(str(var.val['data_type']))
                val_str += "Form: [{}]\n".format(str(var.val['form']))
                val_str += "Tool number: [{}]\n".format(str(var.val['tool_no']))
                val_str += "User coordinate number: [{}]\n".format(str(var.val['user_coor_no']))
                val_str += "Extended form: [{}]\n".format(str(var.val['extended_form']))
                val_str += "Coordinated data: [{}], [{}], [{}], [{}], [{}], [{}], [{}]".format(
                    str(var.val['pos'][0]),
                    str(var.val['pos'][1]),
                    str(var.val['pos'][2]),
                    str(var.val['pos'][3]),
                    str(var.val['pos'][4]),
                    str(var.val['pos'][5]),
                    str(var.val['pos'][6]))
            else:
                val_str = str(var.val)
            self.Text2.insert(tk.END, val_str)
        else:
            self.Text2.delete('1.0', tk.END)
            messagebox.showerror(message="Failed to read the variable. ({})".format(hex(self.robot.errno)))

    def on_write(self):
        num_str = self.Entry1.get()
        if num_str == "":
            messagebox.showinfo(message="Please input variable number.")
            return
        var_num = int(num_str)
        TYPES = (FS100.VarType.IO, FS100.VarType.REGISTER, FS100.VarType.BYTE, FS100.VarType.INTEGER, FS100.VarType.DOUBLE, FS100.VarType.REAL, FS100.VarType.STRING, FS100.VarType.ROBOT_POSITION)
        var_type = TYPES[self.TCombobox1.current()]
        invalid_input = False
        if var_type == FS100.VarType.STRING:
            val = self.Text2.get('1.0', tk.END)
        elif var_type == FS100.VarType.ROBOT_POSITION:
            lines = str.splitlines(str(self.Text2.get('1.0', tk.END)))
            if len(lines) != 6:                
                messagebox.showerror(message="Input format error. (-1)")
                return
            data_type_str = re.findall(r"\[\s*\+?(-?\d+)\s*\]", lines[0])
            form_str = re.findall(r"\[\s*\+?(-?\d+)\s*\]", lines[1])
            tool_no_str = re.findall(r"\[\s*\+?(-?\d+)\s*\]", lines[2])
            user_coor_no_str = re.findall(r"\[\s*\+?(-?\d+)\s*\]", lines[3])
            extended_form_str = re.findall(r"\[\s*\+?(-?\d+)\s*\]", lines[4])
            pos_str = re.findall(r"\[\s*\+?(-?\d+)\s*\]", lines[5])
            if len(data_type_str) != 1 or len(form_str) != 1 or len(tool_no_str) != 1 or len(user_coor_no_str) != 1 or len(extended_form_str) != 1 or len(pos_str) != 7:
                messagebox.showerror(message="Input format error. (-2)")
                return
            val = {}
            try:
                val['data_type'] = int(data_type_str[0])
                val['form'] = int(form_str[0])
                val['tool_no'] = int(tool_no_str[0])
                val['user_coor_no'] = int(user_coor_no_str[0])
                val['extended_form'] = int(extended_form_str[0])
                val['pos'] = (int(pos_str[0]), int(pos_str[1]), int(pos_str[2]), int(pos_str[3]), int(pos_str[4]), int(pos_str[5]), int(pos_str[6]))
            except:
                messagebox.showerror(message="Input format error. (-3)")
                return
        elif var_type == FS100.VarType.REAL:
            try:
                val = float(self.Text2.get('1.0', tk.END))
            except:
                messagebox.showinfo(message="4-byte float for this variable.")
                return
        else:
            try:
                val = int(self.Text2.get('1.0', tk.END))
            except:
                invalid_input = True

            if var_type == FS100.VarType.IO or var_type == FS100.VarType.BYTE:
                if invalid_input or val < 0 or val > (2**8 - 1):
                    messagebox.showinfo(message="1-byte unsigned integer for this variable.")
                    return
            elif var_type == FS100.VarType.REGISTER:
                if invalid_input or val < 0 or val > (2**16 - 1):
                    messagebox.showinfo(message="2-byte unsigned integer for this variable.")
                    return
            elif var_type == FS100.VarType.INTEGER:
                if invalid_input or val < -(2**15) or val > (2**15 - 1):
                    messagebox.showinfo(message="2-byte signed integer for this variable.")
                    return
            elif var_type == FS100.VarType.DOUBLE:
                if invalid_input or val < -(2**31) or val > (2**31 - 1):
                    messagebox.showinfo(message="4-byte signed integer for this variable.")
                    return

        var = FS100.Variable(var_type, var_num, val)
        if FS100.ERROR_SUCCESS != self.robot.write_variable(var):
            messagebox.showerror(message="Failed to write the variable. ({})".format(hex(self.robot.errno)))

if __name__ == '__main__':
    vp_start_gui()





